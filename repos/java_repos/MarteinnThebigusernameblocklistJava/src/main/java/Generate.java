import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.yaml.snakeyaml.DumperOptions;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.representer.Representer;

public class Generate {

    public static void convert(String path) throws IOException {
        String filePath = path + "/list_raw.txt";

        List<String> rawUsernames = Files.readAllLines(Paths.get(filePath));
        List<String> usernames = rawUsernames.stream()
                .map(String::trim)
                .filter(x -> !x.isEmpty() && !x.startsWith("#"))
                .sorted()
                .collect(Collectors.toList());

        String autogenHeader = getAutogenHeader(path);

        writeOptimizedTxt(path, usernames);
        writeJson(path, usernames);
        writePython(path, usernames, autogenHeader);
        writeEs6(path, usernames, autogenHeader);
        writeCommonjs(path, usernames, autogenHeader);
        writePhp(path, usernames, autogenHeader);
        writeYaml(path, usernames, autogenHeader);
    }

    public static String getAutogenHeader(String path) throws IOException {
        String filePath = path + "/list_raw.txt";

        List<String> lines = Files.readAllLines(Paths.get(filePath));
        String dataVersion = lines.get(2).substring(2).trim();

        String currentTime = LocalDateTime.now().toString();

        return "This file was generated by The-Big-Username-Blocklist " + dataVersion + " (at " + currentTime + ")";
    }

    public static void writeOptimizedTxt(String path, List<String> usernames) throws IOException {
        String filePath = path + "/list.txt";
        String optimizedData = String.join("\n", usernames);

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write(optimizedData);
        }
    }

    public static void writeJson(String path, List<String> usernames) throws IOException {
        String filePath = path + "/list.json";
        ObjectMapper mapper = new ObjectMapper();

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(usernames));
        }
    }

    public static void writePython(String path, List<String> usernames, String autogenHeader) throws IOException {
        String filePath = path + "/list.py";
        
        // 生成带双引号的字符串
        String usernamesString = usernames.stream()
            .map(username -> "\"" + username + "\"")
            .collect(Collectors.joining(", ", "[", "]"));
    
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write("# " + autogenHeader + "\n");
            writer.write("data = " + usernamesString + ";");
        }
    }    

    public static void writeEs6(String path, List<String> usernames, String autogenHeader) throws IOException {
        String filePath = path + "/list.js";
        
        // 构建符合 ES6 标准的格式：带有引号
        String usernamesString = usernames.stream()
            .map(username -> "\"" + username + "\"")
            .collect(Collectors.joining(", ", "[", "]"));
    
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write("// " + autogenHeader + "\n");
            writer.write("export default " + usernamesString + ";");
        }
    }

    public static void writeCommonjs(String path, List<String> usernames, String autogenHeader) throws IOException {
        String filePath = path + "/list-commonjs.js";
        
        // 生成带双引号的字符串
        String usernamesString = usernames.stream()
            .map(username -> "\"" + username + "\"")
            .collect(Collectors.joining(", ", "[", "]"));
    
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write("// " + autogenHeader + "\n");
            writer.write("module.exports = " + usernamesString + ";");
        }
    }

    public static void writePhp(String path, List<String> usernames, String autogenHeader) throws IOException {
        String filePath = path + "/list.php";
        
        // 生成带双引号的字符串
        String usernamesString = usernames.stream()
            .map(username -> "\"" + username + "\"")
            .collect(Collectors.joining(", ", "[", "]"));
    
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write("<?php \n");
            writer.write("// " + autogenHeader + "\n");
            writer.write("return " + usernamesString + ";");
        }
    }

    public static void writeYaml(String path, List<String> usernames, String autogenHeader) throws IOException {
        String filePath = path + "/list.yaml";
    
        DumperOptions options = new DumperOptions();
        options.setIndent(2);
        options.setPrettyFlow(true);
        options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
        options.setDefaultScalarStyle(DumperOptions.ScalarStyle.DOUBLE_QUOTED);  // 确保使用双引号
    
        Yaml yaml = new Yaml(new Representer(), options);
    
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write("# " + autogenHeader + "\n");
            writer.write("---\n");
            writer.write(yaml.dump(Collections.singletonMap("usernames", usernames)));  // 不再手动添加双引号
        }
    }

    public static void main(String[] args) throws IOException {
        String currentDir = System.getProperty("user.dir");
        String listDir = currentDir + "/src/main/resources";

        convert(listDir);
    }
}
