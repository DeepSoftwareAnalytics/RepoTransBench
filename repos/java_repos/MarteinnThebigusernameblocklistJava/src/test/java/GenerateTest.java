import org.junit.jupiter.api.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.*;

public class GenerateTest {

    private final String testPath = "test_dir";

    @BeforeEach
    public void setUp() throws IOException {
        Files.createDirectories(Paths.get(testPath));
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(testPath + "/list_raw.txt"))) {
            writer.write("# Test Data\n");
            writer.write("# VERSION=v2.0.1\n");
            writer.write("# 2021-02-13 10:53:03.852225\n");
            writer.write("testuser1\n");
            writer.write("testuser2\n");
            writer.write("testuser3\n");
        }
    }

    @AfterEach
    public void tearDown() throws IOException {
        Files.walk(Paths.get(testPath))
                .map(Path::toFile)
                .forEach(File::delete);
        Files.deleteIfExists(Paths.get(testPath));
    }

    @Test
    public void testConvertCreatesFiles() throws IOException {
        Generate.convert(testPath);
        String[] expectedFiles = {"list.txt", "list.json", "list.py", "list.js", "list-commonjs.js", "list.php", "list.yaml"};

        for (String file : expectedFiles) {
            assertTrue(Files.exists(Paths.get(testPath, file)));
        }
    }

    @Test
    public void testConvertFileContents() throws IOException {
        Generate.convert(testPath);
        List<String> contents = Files.readAllLines(Paths.get(testPath + "/list.txt"));

        assertTrue(contents.contains("testuser1"));
        assertTrue(contents.contains("testuser2"));
        assertTrue(contents.contains("testuser3"));
    }

    @Test
    public void testConvertJsonFormat() throws IOException {
        Generate.convert(testPath);
        String content = new String(Files.readAllBytes(Paths.get(testPath + "/list.json")));

        assertTrue(content.contains("testuser1"));
        assertTrue(content.contains("testuser2"));
        assertTrue(content.contains("testuser3"));
    }

    @Test
    public void testConvertPythonFormat() throws IOException {
        Generate.convert(testPath);
        String content = new String(Files.readAllBytes(Paths.get(testPath + "/list.py")));
        
        assertTrue(content.contains("data = [\"testuser1\", \"testuser2\", \"testuser3\"]"));
    }

    @Test
    public void testConvertYamlFormat() throws IOException {
        Generate.convert(testPath);
        String content = new String(Files.readAllBytes(Paths.get(testPath + "/list.yaml")));

        assertTrue(content.contains("- \"testuser1\""));
        assertTrue(content.contains("- \"testuser2\""));
        assertTrue(content.contains("- \"testuser3\""));
    }

    @Test
    public void testGetAutogenHeaderFormat() throws IOException {
        String header = Generate.getAutogenHeader(testPath);

        assertTrue(header.contains("This file was generated by The-Big-Username-Blocklist 2021-02-13 10:53:03.852225 (at"));
    }

    @Test
    public void testGetAutogenHeaderDate() throws IOException {
        String header = Generate.getAutogenHeader(testPath);
        String currentDate = LocalDate.now().toString();

        assertTrue(header.contains(currentDate));
    }

    @Test
    public void testWriteOptimizedTxt() throws IOException {
        List<String> usernames = List.of("testuser1", "testuser2", "testuser3");
        Generate.writeOptimizedTxt(testPath, usernames);
        List<String> contents = Files.readAllLines(Paths.get(testPath + "/list.txt"));

        assertTrue(contents.contains("testuser1"));
        assertTrue(contents.contains("testuser2"));
        assertTrue(contents.contains("testuser3"));
    }

    @Test
    public void testWriteJson() throws IOException {
        List<String> usernames = List.of("testuser1", "testuser2", "testuser3");
        Generate.writeJson(testPath, usernames);
        String content = new String(Files.readAllBytes(Paths.get(testPath + "/list.json")));

        assertTrue(content.contains("testuser1"));
        assertTrue(content.contains("testuser2"));
        assertTrue(content.contains("testuser3"));
    }

    @Test
    public void testWritePython() throws IOException {
        List<String> usernames = List.of("testuser1", "testuser2", "testuser3");
        String autogenHeader = "This file was generated by The-Big-Username-Blocklist v2.0.1 (at 2021-02-13 10:53:03.852225)";
        Generate.writePython(testPath, usernames, autogenHeader);
        String content = new String(Files.readAllBytes(Paths.get(testPath + "/list.py")));

        assertTrue(content.contains("data = [\"testuser1\", \"testuser2\", \"testuser3\"]"));
    }

    @Test
    public void testWriteEs6() throws IOException {
        List<String> usernames = List.of("testuser1", "testuser2", "testuser3");
        String autogenHeader = "This file was generated by The-Big-Username-Blocklist v2.0.1 (at 2021-02-13 10:53:03.852225)";
        Generate.writeEs6(testPath, usernames, autogenHeader);
        String content = new String(Files.readAllBytes(Paths.get(testPath + "/list.js")));
    
        assertTrue(content.contains("export default [\"testuser1\", \"testuser2\", \"testuser3\"]"));
    }

    @Test
    public void testWriteCommonjs() throws IOException {
        List<String> usernames = List.of("testuser1", "testuser2", "testuser3");
        String autogenHeader = "This file was generated by The-Big-Username-Blocklist v2.0.1 (at 2021-02-13 10:53:03.852225)";
        Generate.writeCommonjs(testPath, usernames, autogenHeader);
        String content = new String(Files.readAllBytes(Paths.get(testPath + "/list-commonjs.js")));
    
        assertTrue(content.contains("module.exports = [\"testuser1\", \"testuser2\", \"testuser3\"]"));
    }

    @Test
    public void testWritePhp() throws IOException {
        List<String> usernames = List.of("testuser1", "testuser2", "testuser3");
        String autogenHeader = "This file was generated by The-Big-Username-Blocklist v2.0.1 (at 2021-02-13 10:53:03.852225)";
        Generate.writePhp(testPath, usernames, autogenHeader);
        String content = new String(Files.readAllBytes(Paths.get(testPath + "/list.php")));
    
        assertTrue(content.contains("return [\"testuser1\", \"testuser2\", \"testuser3\"]"));
    }

    @Test
    public void testWriteYaml() throws IOException {
        List<String> usernames = List.of("testuser1", "testuser2", "testuser3");
        String autogenHeader = "This file was generated by The-Big-Username-Blocklist v2.0.1 (at 2021-02-13 10:53:03.852225)";
        Generate.writeYaml(testPath, usernames, autogenHeader);
        String content = new String(Files.readAllBytes(Paths.get(testPath + "/list.yaml")));

        assertTrue(content.contains("- \"testuser1\""));
        assertTrue(content.contains("- \"testuser2\""));
        assertTrue(content.contains("- \"testuser3\""));
    }
}
