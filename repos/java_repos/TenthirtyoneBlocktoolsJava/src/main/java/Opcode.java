import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.HashMap;

public class Opcode {

    public static final int SIGHASH_ALL = 0x01;
    public static final int SIGHASH_NONE = 0x02;
    public static final int SIGHASH_SINGLE = 0x03;
    public static final int SIGHASH_ANYONECANPAY = 0x80;

    public static final String TX_NONSTANDARD = "non-standard";
    public static final String TX_PUBKEY = "pubkey";
    public static final String TX_PUBKEYHASH = "pubkey-hash";
    public static final String TX_SCRIPTHASH = "script-hash";
    public static final String TX_MULTISIG = "multi-sig";

    // push value
    public static final int OP_0 = 0x00;
    public static final int OP_FALSE = OP_0;
    public static final int OP_PUSHDATA1 = 0x4c;
    public static final int OP_PUSHDATA2 = 0x4d;
    public static final int OP_PUSHDATA4 = 0x4e;
    public static final int OP_1NEGATE = 0x4f;
    public static final int OP_RESERVED = 0x50;
    public static final int OP_1 = 0x51;
    public static final int OP_TRUE = OP_1;
    public static final int OP_2 = 0x52;
    public static final int OP_3 = 0x53;
    public static final int OP_4 = 0x54;
    public static final int OP_5 = 0x55;
    public static final int OP_6 = 0x56;
    public static final int OP_7 = 0x57;
    public static final int OP_8 = 0x58;
    public static final int OP_9 = 0x59;
    public static final int OP_10 = 0x5a;
    public static final int OP_11 = 0x5b;
    public static final int OP_12 = 0x5c;
    public static final int OP_13 = 0x5d;
    public static final int OP_14 = 0x5e;
    public static final int OP_15 = 0x5f;
    public static final int OP_16 = 0x60;

    // control
    public static final int OP_NOP = 0x61;
    public static final int OP_VER = 0x62;
    public static final int OP_IF = 0x63;
    public static final int OP_NOTIF = 0x64;
    public static final int OP_VERIF = 0x65;
    public static final int OP_VERNOTIF = 0x66;
    public static final int OP_ELSE = 0x67;
    public static final int OP_ENDIF = 0x68;
    public static final int OP_VERIFY = 0x69;
    public static final int OP_RETURN = 0x6a;

    // stack ops
    public static final int OP_TOALTSTACK = 0x6b;
    public static final int OP_FROMALTSTACK = 0x6c;
    public static final int OP_2DROP = 0x6d;
    public static final int OP_2DUP = 0x6e;
    public static final int OP_3DUP = 0x6f;
    public static final int OP_2OVER = 0x70;
    public static final int OP_2ROT = 0x71;
    public static final int OP_2SWAP = 0x72;
    public static final int OP_IFDUP = 0x73;
    public static final int OP_DEPTH = 0x74;
    public static final int OP_DROP = 0x75;
    public static final int OP_DUP = 0x76;
    public static final int OP_NIP = 0x77;
    public static final int OP_OVER = 0x78;
    public static final int OP_PICK = 0x79;
    public static final int OP_ROLL = 0x7a;
    public static final int OP_ROT = 0x7b;
    public static final int OP_SWAP = 0x7c;
    public static final int OP_TUCK = 0x7d;

    // splice ops
    public static final int OP_CAT = 0x7e;
    public static final int OP_SUBSTR = 0x7f;
    public static final int OP_LEFT = 0x80;
    public static final int OP_RIGHT = 0x81;
    public static final int OP_SIZE = 0x82;

    // bit logic
    public static final int OP_INVERT = 0x83;
    public static final int OP_AND = 0x84;
    public static final int OP_OR = 0x85;
    public static final int OP_XOR = 0x86;
    public static final int OP_EQUAL = 0x87;
    public static final int OP_EQUALVERIFY = 0x88;
    public static final int OP_RESERVED1 = 0x89;
    public static final int OP_RESERVED2 = 0x8a;

    // numeric
    public static final int OP_1ADD = 0x8b;
    public static final int OP_1SUB = 0x8c;
    public static final int OP_2MUL = 0x8d;
    public static final int OP_2DIV = 0x8e;
    public static final int OP_NEGATE = 0x8f;
    public static final int OP_ABS = 0x90;
    public static final int OP_NOT = 0x91;
    public static final int OP_0NOTEQUAL = 0x92;

    public static final int OP_ADD = 0x93;
    public static final int OP_SUB = 0x94;
    public static final int OP_MUL = 0x95;
    public static final int OP_DIV = 0x96;
    public static final int OP_MOD = 0x97;
    public static final int OP_LSHIFT = 0x98;
    public static final int OP_RSHIFT = 0x99;

    public static final int OP_BOOLAND = 0x9a;
    public static final int OP_BOOLOR = 0x9b;
    public static final int OP_NUMEQUAL = 0x9c;
    public static final int OP_NUMEQUALVERIFY = 0x9d;
    public static final int OP_NUMNOTEQUAL = 0x9e;
    public static final int OP_LESSTHAN = 0x9f;
    public static final int OP_GREATERTHAN = 0xa0;
    public static final int OP_LESSTHANOREQUAL = 0xa1;
    public static final int OP_GREATERTHANOREQUAL = 0xa2;
    public static final int OP_MIN = 0xa3;
    public static final int OP_MAX = 0xa4;
    public static final int OP_WITHIN = 0xa5;

    // crypto
    public static final int OP_RIPEMD160 = 0xa6;
    public static final int OP_SHA1 = 0xa7;
    public static final int OP_SHA256 = 0xa8;
    public static final int OP_HASH160 = 0xa9;
    public static final int OP_HASH256 = 0xaa;
    public static final int OP_CODESEPARATOR = 0xab;
    public static final int OP_CHECKSIG = 0xac;
    public static final int OP_CHECKSIGVERIFY = 0xad;
    public static final int OP_CHECKMULTISIG = 0xae;
    public static final int OP_CHECKMULTISIGVERIFY = 0xaf;

    // expansion
    public static final int OP_NOP1 = 0xb0;
    public static final int OP_NOP2 = 0xb1;
    public static final int OP_NOP3 = 0xb2;
    public static final int OP_NOP4 = 0xb3;
    public static final int OP_NOP5 = 0xb4;
    public static final int OP_NOP6 = 0xb5;
    public static final int OP_NOP7 = 0xb6;
    public static final int OP_NOP8 = 0xb7;
    public static final int OP_NOP9 = 0xb8;
    public static final int OP_NOP10 = 0xb9;

    // template matching params
    public static final int OP_SMALLINTEGER = 0xfa;
    public static final int OP_PUBKEYS = 0xfb;
    public static final int OP_PUBKEYHASH = 0xfd;
    public static final int OP_PUBKEY = 0xfe;
    public static final int OP_INVALIDOPCODE = 0xff;

    // Valid opcodes
    public static final Set<Integer> VALID_OPCODES = new HashSet<Integer>() {{
        add(OP_1NEGATE);
        add(OP_RESERVED);
        add(OP_1);
        add(OP_2);
        add(OP_3);
        add(OP_4);
        add(OP_5);
        add(OP_6);
        add(OP_7);
        add(OP_8);
        add(OP_9);
        add(OP_10);
        add(OP_11);
        add(OP_12);
        add(OP_13);
        add(OP_14);
        add(OP_15);
        add(OP_16);
        add(OP_NOP);
        add(OP_VER);
        add(OP_IF);
        add(OP_NOTIF);
        add(OP_VERIF);
        add(OP_VERNOTIF);
        add(OP_ELSE);
        add(OP_ENDIF);
        add(OP_VERIFY);
        add(OP_RETURN);
        add(OP_TOALTSTACK);
        add(OP_FROMALTSTACK);
        add(OP_2DROP);
        add(OP_2DUP);
        add(OP_3DUP);
        add(OP_2OVER);
        add(OP_2ROT);
        add(OP_2SWAP);
        add(OP_IFDUP);
        add(OP_DEPTH);
        add(OP_DROP);
        add(OP_DUP);
        add(OP_NIP);
        add(OP_OVER);
        add(OP_PICK);
        add(OP_ROLL);
        add(OP_ROT);
        add(OP_SWAP);
        add(OP_TUCK);
        add(OP_CAT);
        add(OP_SUBSTR);
        add(OP_LEFT);
        add(OP_RIGHT);
        add(OP_SIZE);
        add(OP_INVERT);
        add(OP_AND);
        add(OP_OR);
        add(OP_XOR);
        add(OP_EQUAL);
        add(OP_EQUALVERIFY);
        add(OP_RESERVED1);
        add(OP_RESERVED2);
        add(OP_1ADD);
        add(OP_1SUB);
        add(OP_2MUL);
        add(OP_2DIV);
        add(OP_NEGATE);
        add(OP_ABS);
        add(OP_NOT);
        add(OP_0NOTEQUAL);
        add(OP_ADD);
        add(OP_SUB);
        add(OP_MUL);
        add(OP_DIV);
        add(OP_MOD);
        add(OP_LSHIFT);
        add(OP_RSHIFT);
        add(OP_BOOLAND);
        add(OP_BOOLOR);
        add(OP_NUMEQUAL);
        add(OP_NUMEQUALVERIFY);
        add(OP_NUMNOTEQUAL);
        add(OP_LESSTHAN);
        add(OP_GREATERTHAN);
        add(OP_LESSTHANOREQUAL);
        add(OP_GREATERTHANOREQUAL);
        add(OP_MIN);
        add(OP_MAX);
        add(OP_WITHIN);
        add(OP_RIPEMD160);
        add(OP_SHA1);
        add(OP_SHA256);
        add(OP_HASH160);
        add(OP_HASH256);
        add(OP_CODESEPARATOR);
        add(OP_CHECKSIG);
        add(OP_CHECKSIGVERIFY);
        add(OP_CHECKMULTISIG);
        add(OP_CHECKMULTISIGVERIFY);
        add(OP_NOP1);
        add(OP_NOP2);
        add(OP_NOP3);
        add(OP_NOP4);
        add(OP_NOP5);
        add(OP_NOP6);
        add(OP_NOP7);
        add(OP_NOP8);
        add(OP_NOP9);
        add(OP_NOP10);
        add(OP_SMALLINTEGER);
        add(OP_PUBKEYS);
        add(OP_PUBKEYHASH);
        add(OP_PUBKEY);
    }};

    public static final Map<Integer, String> OPCODE_NAMES = new HashMap<Integer, String>() {{
        put(OP_0, "OP_0");
        put(OP_PUSHDATA1, "OP_PUSHDATA1");
        put(OP_PUSHDATA2, "OP_PUSHDATA2");
        put(OP_PUSHDATA4, "OP_PUSHDATA4");
        put(OP_1NEGATE, "OP_1NEGATE");
        put(OP_RESERVED, "OP_RESERVED");
        put(OP_1, "OP_1");
        put(OP_2, "OP_2");
        put(OP_3, "OP_3");
        put(OP_4, "OP_4");
        put(OP_5, "OP_5");
        put(OP_6, "OP_6");
        put(OP_7, "OP_7");
        put(OP_8, "OP_8");
        put(OP_9, "OP_9");
        put(OP_10, "OP_10");
        put(OP_11, "OP_11");
        put(OP_12, "OP_12");
        put(OP_13, "OP_13");
        put(OP_14, "OP_14");
        put(OP_15, "OP_15");
        put(OP_16, "OP_16");
        put(OP_NOP, "OP_NOP");
        put(OP_VER, "OP_VER");
        put(OP_IF, "OP_IF");
        put(OP_NOTIF, "OP_NOTIF");
        put(OP_VERIF, "OP_VERIF");
        put(OP_VERNOTIF, "OP_VERNOTIF");
        put(OP_ELSE, "OP_ELSE");
        put(OP_ENDIF, "OP_ENDIF");
        put(OP_VERIFY, "OP_VERIFY");
        put(OP_RETURN, "OP_RETURN");
        put(OP_TOALTSTACK, "OP_TOALTSTACK");
        put(OP_FROMALTSTACK, "OP_FROMALTSTACK");
        put(OP_2DROP, "OP_2DROP");
        put(OP_2DUP, "OP_2DUP");
        put(OP_3DUP, "OP_3DUP");
        put(OP_2OVER, "OP_2OVER");
        put(OP_2ROT, "OP_2ROT");
        put(OP_2SWAP, "OP_2SWAP");
        put(OP_IFDUP, "OP_IFDUP");
        put(OP_DEPTH, "OP_DEPTH");
        put(OP_DROP, "OP_DROP");
        put(OP_DUP, "OP_DUP");
        put(OP_NIP, "OP_NIP");
        put(OP_OVER, "OP_OVER");
        put(OP_PICK, "OP_PICK");
        put(OP_ROLL, "OP_ROLL");
        put(OP_ROT, "OP_ROT");
        put(OP_SWAP, "OP_SWAP");
        put(OP_TUCK, "OP_TUCK");
        put(OP_CAT, "OP_CAT");
        put(OP_SUBSTR, "OP_SUBSTR");
        put(OP_LEFT, "OP_LEFT");
        put(OP_RIGHT, "OP_RIGHT");
        put(OP_SIZE, "OP_SIZE");
        put(OP_INVERT, "OP_INVERT");
        put(OP_AND, "OP_AND");
        put(OP_OR, "OP_OR");
        put(OP_EQUAL, "OP_EQUAL");
        put(OP_EQUALVERIFY, "OP_EQUALVERIFY");
        put(OP_RESERVED1, "OP_RESERVED1");
        put(OP_RESERVED2, "OP_RESERVED2");
        put(OP_1ADD, "OP_1ADD");
        put(OP_1SUB, "OP_1SUB");
        put(OP_2MUL, "OP_2MUL");
        put(OP_2DIV, "OP_2DIV");
        put(OP_NEGATE, "OP_NEGATE");
        put(OP_ABS, "OP_ABS");
        put(OP_NOT, "OP_NOT");
        put(OP_0NOTEQUAL, "OP_0NOTEQUAL");
        put(OP_ADD, "OP_ADD");
        put(OP_SUB, "OP_SUB");
        put(OP_MUL, "OP_MUL");
        put(OP_DIV, "OP_DIV");
        put(OP_MOD, "OP_MOD");
        put(OP_LSHIFT, "OP_LSHIFT");
        put(OP_RSHIFT, "OP_RSHIFT");
        put(OP_BOOLAND, "OP_BOOLAND");
        put(OP_BOOLOR, "OP_BOOLOR");
        put(OP_NUMEQUAL, "OP_NUMEQUAL");
        put(OP_NUMEQUALVERIFY, "OP_NUMEQUALVERIFY");
        put(OP_NUMNOTEQUAL, "OP_NUMNOTEQUAL");
        put(OP_LESSTHAN, "OP_LESSTHAN");
        put(OP_GREATERTHAN, "OP_GREATERTHAN");
        put(OP_LESSTHANOREQUAL, "OP_LESSTHANOREQUAL");
        put(OP_GREATERTHANOREQUAL, "OP_GREATERTHANOREQUAL");
        put(OP_MIN, "OP_MIN");
        put(OP_MAX, "OP_MAX");
        put(OP_WITHIN, "OP_WITHIN");
        put(OP_RIPEMD160, "OP_RIPEMD160");
        put(OP_SHA1, "OP_SHA1");
        put(OP_SHA256, "OP_SHA256");
        put(OP_HASH160, "OP_HASH160");
        put(OP_HASH256, "OP_HASH256");
        put(OP_CODESEPARATOR, "OP_CODESEPARATOR");
        put(OP_CHECKSIG, "OP_CHECKSIG");
        put(OP_CHECKSIGVERIFY, "OP_CHECKSIGVERIFY");
        put(OP_CHECKMULTISIG, "OP_CHECKMULTISIG");
        put(OP_CHECKMULTISIGVERIFY, "OP_CHECKMULTISIGVERIFY");
        put(OP_NOP1, "OP_NOP1");
        put(OP_NOP2, "OP_NOP2");
        put(OP_NOP3, "OP_NOP3");
        put(OP_NOP4, "OP_NOP4");
        put(OP_NOP5, "OP_NOP5");
        put(OP_NOP6, "OP_NOP6");
        put(OP_NOP7, "OP_NOP7");
        put(OP_NOP8, "OP_NOP8");
        put(OP_NOP9, "OP_NOP9");
        put(OP_NOP10, "OP_NOP10");
        put(OP_SMALLINTEGER, "OP_SMALLINTEGER");
        put(OP_PUBKEYS, "OP_PUBKEYS");
        put(OP_PUBKEYHASH, "OP_PUBKEYHASH");
        put(OP_PUBKEY, "OP_PUBKEY");
    }};
}
